services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: krilin_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: krilin_ai
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: krilin_redis
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build: .
    container_name: krilin_backend
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/krilin_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=krilin-dev-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/.venv  # Don't mount virtual env
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build: .
    container_name: krilin_celery_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/krilin_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=krilin-dev-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key-here}
      - CELERY_WORKER=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - .:/app
      - /app/.venv
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=2
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build: .
    container_name: krilin_celery_beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/krilin_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=krilin-dev-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key-here}
      - CELERY_WORKER=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - .:/app
      - /app/.venv
    command: celery -A app.workers.celery_app beat --loglevel=info
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: