"""initial_schema_with_compaction

Revision ID: fdda2b2bc10f
Revises: 
Create Date: 2025-10-03 08:48:17.120723

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fdda2b2bc10f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_connections_follower_id'), table_name='user_connections')
    op.drop_index(op.f('ix_user_connections_following_id'), table_name='user_connections')
    op.drop_index(op.f('ix_user_connections_id'), table_name='user_connections')
    op.drop_table('user_connections')
    op.drop_index(op.f('ix_accomplishments_accomplishment_type'), table_name='accomplishments')
    op.drop_index(op.f('ix_accomplishments_goal_id'), table_name='accomplishments')
    op.drop_index(op.f('ix_accomplishments_id'), table_name='accomplishments')
    op.drop_index(op.f('ix_accomplishments_user_id'), table_name='accomplishments')
    op.drop_table('accomplishments')
    op.drop_index(op.f('ix_accomplishment_reactions_accomplishment_id'), table_name='accomplishment_reactions')
    op.drop_index(op.f('ix_accomplishment_reactions_id'), table_name='accomplishment_reactions')
    op.drop_index(op.f('ix_accomplishment_reactions_user_id'), table_name='accomplishment_reactions')
    op.drop_table('accomplishment_reactions')
    op.drop_index(op.f('ix_accomplishment_comments_accomplishment_id'), table_name='accomplishment_comments')
    op.drop_index(op.f('ix_accomplishment_comments_id'), table_name='accomplishment_comments')
    op.drop_index(op.f('ix_accomplishment_comments_user_id'), table_name='accomplishment_comments')
    op.drop_table('accomplishment_comments')
    op.drop_index(op.f('ix_challenge_participation_challenge_id'), table_name='challenge_participation')
    op.drop_index(op.f('ix_challenge_participation_id'), table_name='challenge_participation')
    op.drop_index(op.f('ix_challenge_participation_user_id'), table_name='challenge_participation')
    op.drop_table('challenge_participation')
    op.drop_index(op.f('ix_sync_history_data_source_id'), table_name='sync_history')
    op.drop_index(op.f('ix_sync_history_id'), table_name='sync_history')
    op.drop_table('sync_history')
    op.drop_index(op.f('ix_data_sources_id'), table_name='data_sources')
    op.drop_index(op.f('ix_data_sources_source_type'), table_name='data_sources')
    op.drop_index(op.f('ix_data_sources_user_id'), table_name='data_sources')
    op.drop_table('data_sources')
    op.drop_index(op.f('ix_data_records_data_source_id'), table_name='data_records')
    op.drop_index(op.f('ix_data_records_external_id'), table_name='data_records')
    op.drop_index(op.f('ix_data_records_id'), table_name='data_records')
    op.drop_index(op.f('ix_data_records_is_processed'), table_name='data_records')
    op.drop_index(op.f('ix_data_records_record_date'), table_name='data_records')
    op.drop_index(op.f('ix_data_records_record_type'), table_name='data_records')
    op.drop_index(op.f('ix_data_records_user_id'), table_name='data_records')
    op.drop_table('data_records')
    op.drop_index(op.f('ix_community_challenges_category'), table_name='community_challenges')
    op.drop_index(op.f('ix_community_challenges_id'), table_name='community_challenges')
    op.drop_table('community_challenges')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('community_challenges',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('community_challenges_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('rules', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('success_criteria', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('rewards', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('participant_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('completion_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='community_challenges_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_community_challenges_id'), 'community_challenges', ['id'], unique=False)
    op.create_index(op.f('ix_community_challenges_category'), 'community_challenges', ['category'], unique=False)
    op.create_table('data_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data_source_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('external_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('record_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('processed_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('importance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('categories', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('record_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_processed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], name=op.f('data_records_data_source_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('data_records_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('data_records_pkey'))
    )
    op.create_index(op.f('ix_data_records_user_id'), 'data_records', ['user_id'], unique=False)
    op.create_index(op.f('ix_data_records_record_type'), 'data_records', ['record_type'], unique=False)
    op.create_index(op.f('ix_data_records_record_date'), 'data_records', ['record_date'], unique=False)
    op.create_index(op.f('ix_data_records_is_processed'), 'data_records', ['is_processed'], unique=False)
    op.create_index(op.f('ix_data_records_id'), 'data_records', ['id'], unique=False)
    op.create_index(op.f('ix_data_records_external_id'), 'data_records', ['external_id'], unique=False)
    op.create_index(op.f('ix_data_records_data_source_id'), 'data_records', ['data_source_id'], unique=False)
    op.create_table('data_sources',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('data_sources_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('credentials', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('sync_frequency', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auto_sync', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_sync_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('consecutive_failures', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='data_sources_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='data_sources_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_data_sources_user_id'), 'data_sources', ['user_id'], unique=False)
    op.create_index(op.f('ix_data_sources_source_type'), 'data_sources', ['source_type'], unique=False)
    op.create_index(op.f('ix_data_sources_id'), 'data_sources', ['id'], unique=False)
    op.create_table('sync_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('data_source_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration_seconds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('records_processed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_created', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_updated', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], name=op.f('sync_history_data_source_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sync_history_pkey'))
    )
    op.create_index(op.f('ix_sync_history_id'), 'sync_history', ['id'], unique=False)
    op.create_index(op.f('ix_sync_history_data_source_id'), 'sync_history', ['data_source_id'], unique=False)
    op.create_table('challenge_participation',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('challenge_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('progress', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('completion_proof', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['challenge_id'], ['community_challenges.id'], name=op.f('challenge_participation_challenge_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('challenge_participation_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('challenge_participation_pkey'))
    )
    op.create_index(op.f('ix_challenge_participation_user_id'), 'challenge_participation', ['user_id'], unique=False)
    op.create_index(op.f('ix_challenge_participation_id'), 'challenge_participation', ['id'], unique=False)
    op.create_index(op.f('ix_challenge_participation_challenge_id'), 'challenge_participation', ['challenge_id'], unique=False)
    op.create_table('accomplishment_comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('accomplishment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parent_comment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reaction_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['accomplishment_id'], ['accomplishments.id'], name=op.f('accomplishment_comments_accomplishment_id_fkey')),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['accomplishment_comments.id'], name=op.f('accomplishment_comments_parent_comment_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('accomplishment_comments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('accomplishment_comments_pkey'))
    )
    op.create_index(op.f('ix_accomplishment_comments_user_id'), 'accomplishment_comments', ['user_id'], unique=False)
    op.create_index(op.f('ix_accomplishment_comments_id'), 'accomplishment_comments', ['id'], unique=False)
    op.create_index(op.f('ix_accomplishment_comments_accomplishment_id'), 'accomplishment_comments', ['accomplishment_id'], unique=False)
    op.create_table('accomplishment_reactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('accomplishment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reaction_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['accomplishment_id'], ['accomplishments.id'], name=op.f('accomplishment_reactions_accomplishment_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('accomplishment_reactions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('accomplishment_reactions_pkey'))
    )
    op.create_index(op.f('ix_accomplishment_reactions_user_id'), 'accomplishment_reactions', ['user_id'], unique=False)
    op.create_index(op.f('ix_accomplishment_reactions_id'), 'accomplishment_reactions', ['id'], unique=False)
    op.create_index(op.f('ix_accomplishment_reactions_accomplishment_id'), 'accomplishment_reactions', ['accomplishment_id'], unique=False)
    op.create_table('accomplishments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('goal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('accomplishment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('evidence', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('visibility', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reaction_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('share_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('accomplished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], name=op.f('accomplishments_goal_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('accomplishments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('accomplishments_pkey'))
    )
    op.create_index(op.f('ix_accomplishments_user_id'), 'accomplishments', ['user_id'], unique=False)
    op.create_index(op.f('ix_accomplishments_id'), 'accomplishments', ['id'], unique=False)
    op.create_index(op.f('ix_accomplishments_goal_id'), 'accomplishments', ['goal_id'], unique=False)
    op.create_index(op.f('ix_accomplishments_accomplishment_type'), 'accomplishments', ['accomplishment_type'], unique=False)
    op.create_table('user_connections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('follower_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('following_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('connection_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_mutual', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_blocked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], name=op.f('user_connections_follower_id_fkey')),
    sa.ForeignKeyConstraint(['following_id'], ['users.id'], name=op.f('user_connections_following_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_connections_pkey'))
    )
    op.create_index(op.f('ix_user_connections_id'), 'user_connections', ['id'], unique=False)
    op.create_index(op.f('ix_user_connections_following_id'), 'user_connections', ['following_id'], unique=False)
    op.create_index(op.f('ix_user_connections_follower_id'), 'user_connections', ['follower_id'], unique=False)
    # ### end Alembic commands ###
